@model Transcode.ViewModel.Conversion.ConversionForm

@{
    ViewBag.Title = "Convert";
}

<h2>Convert</h2>


@using (Html.BeginForm()) 
{
    @Html.AntiForgeryToken()
    
    <div class="form-horizontal">
        <h4>ConversionForm</h4>
        <hr />
        @Html.ValidationSummary("", htmlAttributes: new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.Url, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Url, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Url, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <label for="file" class="control-label col-md-2">Uploader un fichier</label>
            <div class="col-md-10">
                @Html.TextBoxFor(m => m.File, new { type = "file", @class = "form-control full-width", id = "file" })
                @if(Session["connectionForm"] == null)
                {
                    <span class="text-info">Veuillez sélectionner à nouveau le fichier si vous venez ici depuis la page d'accueil</span>
                }
            </div>
            
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Format, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <select name="Format" class="form-control full-width" id="conversionFormFormat">
                    <optgroup label="Video" id="format_video">
                        @foreach (string format in (IEnumerable<string>)ViewBag.videoFormats)
                        {
                            <option>@format</option>
                        }
                    </optgroup>



                    <optgroup label="Audio" id="format_audio">
                        @foreach (string format in (IEnumerable<string>)ViewBag.audioFormats)
                        {
                            <option>@format</option>
                        }
                    </optgroup>
                </select>
                @Html.ValidationMessageFor(model => model.Format, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Conversion" class="btn btn-success" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
